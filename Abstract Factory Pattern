package main

import "fmt"

type AbstractProductA interface {
	MethodA() string
}

type AbstractProductB interface {
	MethodB() string
}

type ConcreteProductA1 struct{}

func (c *ConcreteProductA1) MethodA() string {
	return "Product A1"
}

type ConcreteProductA2 struct{}

func (c *ConcreteProductA2) MethodA() string {
	return "Product A2"
}

type ConcreteProductB1 struct{}

func (c *ConcreteProductB1) MethodB() string {
	return "Product B1"
}

type ConcreteProductB2 struct{}

func (c *ConcreteProductB2) MethodB() string {
	return "Product B2"
}

type AbstractFactory interface {
	CreateProductA() AbstractProductA
	CreateProductB() AbstractProductB
}

type ConcreteFactory1 struct{}

func (c *ConcreteFactory1) CreateProductA() AbstractProductA {
	return &ConcreteProductA1{}
}

func (c *ConcreteFactory1) CreateProductB() AbstractProductB {
	return &ConcreteProductB1{}
}

type ConcreteFactory2 struct{}

func (c *ConcreteFactory2) CreateProductA() AbstractProductA {
	return &ConcreteProductA2{}
}

func (c *ConcreteFactory2) CreateProductB() AbstractProductB {
	return &ConcreteProductB2{}
}

func main() {
	factory1 := &ConcreteFactory1{}
	productA1 := factory1.CreateProductA()
	productB1 := factory1.CreateProductB()
	fmt.Println(productA1.MethodA())
	fmt.Println(productB1.MethodB()) 

	factory2 := &ConcreteFactory2{}
	productA2 := factory2.CreateProductA()
	productB2 := factory2.CreateProductB()
	fmt.Println(productA2.MethodA()) 
	fmt.Println(productB2.MethodB()) 
}
